#!/usr/bin/env node

var path = require('path')
  , util = require('util')
  , isUrl = require('is-url')
  , request = require('request')
  , flatten = require('lodash.flatten')
  , fs = require('fs')
  , Ldc = require('..')
  , optimist = require('optimist')
  , read = require('read')
  , async = require('async')
  , rimraf = require('rimraf')
  , validateUser = require('npm-user-validate')
  , semver = require('semver')
  , split = require('split')
  , querystring = require('querystring')
  , tree = require('../lib/tree')
  , readdirpSync = require('fs-readdir-recursive')
  , uniq = require('lodash.uniq')
  , githubUrl = require('github-url')
  , os = require('os')
  , colors = require('colors');

var argv = optimist
  .usage(
    [
      'Usage: ldc <command> [options] where command is:',
      '  - init [globs] [urls] [-d, --defaults] [-b --codebundle <relative/path/to/code/directory>] Interactively create a container.jsonld file and add the files listed as globs (*.csv ... and urls) as dataset. Be sure to double quote the glob so that the shell does not expand them',
      '  - cat       <container name>[@<version>] [-e, --expand]',
      '  - install   <container name 1>[@<version>] <container name 2>[@<version>] <container url> ... [-t, --top] [-a, --env] [-c, --cache] [-r, --require] [-s, --save]',
      '  - publish',
      '  - unpublish <container name>[@<version>]',
      '  - adduser',
      '  - owner <subcommand> where subcommand is:',
      '    - ls  <container name>',
      '    - add <user> <container name>',
      '    - rm  <user> <container name>[@<version>]',
      '  - search [search terms]',
      '  - help [command]',
    ].join(os.EOL)
  )
  .alias('f', 'force').describe('f', 'overwrite previous if exists')
  .alias('d', 'defaults').describe('d', 'bypass the promzard prompt')
  .alias('t', 'top').describe('t', 'install in the current working directory (and not within ld_containers/)')
  .alias('a', 'env').describe('a', 'install all the environment files present in the directory at publication time')
  .alias('e', 'expand').describe('e', 'expand the JSON-LD document')
  .alias('s', 'save').describe('s', 'data packages will appear in your dataDependencies')
  .alias('c', 'cache').describe('c', 'store the dataset content on the disk (inlined data will stay in the container.jsonld see -r, --require to change this behavior)')
  .alias('r', 'require').describe('c', 'force the inlined dataset (contentData) to be stored in their own file in ld_resources/')
  .alias('b', 'codebundle').describe('b', 'treat the listed directory as a code project')
  .alias('h', 'help').describe('h', 'print usage')
  .alias('v', 'version').describe('v', 'print version number')
  .argv;

if(argv.h){
  console.log(optimist.help());
  process.exit(0);
}

if(argv.v){
  console.log(require('../package.json').version);
  process.exit(0);
}

//if cloudant: use sha:true
var ldc = new Ldc(require('rc')('ldc', {protocol: 'https', port: 443, hostname: 'registry.standardanalytics.io', strictSSL: false, sha:true}), process.cwd());

if(argv._[0] !== 'cat'){
  ldc.on('log', console.log);
}

if (argv._[0] === 'init') {

  (function(){

    //taken from https://github.com/maxogden/datapackage-json/blob/master/prompt.js
    var description;
    try {
      var src = fs.readFileSync('README.md', 'utf8');
      description = src.split('\n').filter(function (line) {
        return /\s+/.test(line) && !line.trim().match(/^#/)
        ;
      })[0]
        .trim()
        .replace(/^./, function (c) { return c.toLowerCase() })
        .replace(/\.$/, '')
      ;
    } catch (e) { }
    
    //taken from https://github.com/maxogden/datapackage-json/blob/master/prompt.js
    try { var gconf = fs.readFileSync('.git/config').toString() }
    catch (e) { gconf = null }
    if (gconf) {
      gconf = gconf.split(/\r?\n/)
      var i = gconf.indexOf('[remote "origin"]')
      if (i !== -1) {
        var codeRepository = gconf[i + 1]
        if (!codeRepository.match(/^\s*url =/)) codeRepository = gconf[i + 2]
        if (!codeRepository.match(/^\s*url =/)) codeRepository = null
        else codeRepository = codeRepository.replace(/^\s*url = /, '')
      }
      if (codeRepository && codeRepository.match(/^git@github.com:/))
        codeRepository = codeRepository.replace(/^git@github.com:/, 'git://github.com/')
    }

    var prompt
    if(argv.defaults){
      prompt = [
        function(cb){
          var defaults = {
            license: 'CC0-1.0',
            authorName: ldc.rc.name,
            authorEmail: ldc.rc.email,
            description: description,
            codeRepository: codeRepository
          }; 
          cb(null, defaults);
        }
      ];
    } else {
      prompt = {
        name: function(cb){
          read({prompt: 'data package name: '}, function(err, prompted, _){cb(err, prompted);});
        },
        authorName: function(cb){
          read({ prompt: 'your name: ', default: ldc.rc.name }, function(err, prompted, _){cb(err, prompted);});
        },
        authorEmail: function(cb){
          read({ prompt: 'your email: ', default: ldc.rc.email }, function(err, prompted, _){cb(err, prompted);});
        },
        keywords: function(cb){
          read({prompt: 'keywords: '}, function(err, prompted, _){cb(err, prompted.split(/[\s,]+/));});
        },
        description: function(cb){
          read({ prompt: 'data package description: ', default: description }, function(err, prompted, _){cb(err, prompted);});        
        },
        codeRepository: function(cb){
          read({ prompt: 'code repository URL: ', default: codeRepository }, function(err, prompted, _){cb(err, prompted);});
        },
        license: function(cb){
          read({ prompt: 'license: ', default: 'CC0-1.0' }, function(err, prompted, _){cb(err, prompted);});
        }
      };
    }

    async.series(prompt, function (err, prompted){
      if(err) _fail(err);
      prompted = Array.isArray(prompted) ? prompted[0]: prompted;

      var ctnr = {};
      [ 'name', 'description', 'keywords' ,'license' ].forEach(function(key){
        if(prompted[key]){
          ctnr[key] = prompted[key];
        }
      });

      if(prompted.authorName || prompted.authorEmail){
        ctnr.author = {};
        if (prompted.authorName) ctnr.author.name = prompted.authorName;
        if (prompted.authorEmail) ctnr.author.email = prompted.authorEmail;
      }

      if(prompted.codeRepository){
        ctnr.codeRepository = prompted.codeRepository;
      }
      
      var inputs = argv._.slice(1);
      var codeBundles = (Array.isArray(argv.codebundle)) ? argv.codebundle : 
        ((argv.codebundle)? [ argv.codebundle ] : []);

      ldc.paths2resources(inputs.filter(function(x){return !(isUrl(x) || githubUrl(x));}), { codeBundles: codeBundles } , function(err, resourcesFromPath){
        if(err) _fail(err);

        ldc.urls2resources(inputs.filter(function(x){return ( isUrl(x) || githubUrl(x) );}), function(err, resourcesFromUrls){
          if(err) _fail(err);
                   
          for (var type in resourcesFromPath){
            resourcesFromPath[type] = resourcesFromPath[type].concat(resourcesFromUrls[type]); //merge
            ldc.addResources(ctnr, resourcesFromPath);
          }

          fs.writeFileSync(path.resolve(ldc.root, 'container.jsonld'), JSON.stringify(ctnr, null, 2));

        });
      });


    });
    
  })();

} else if (argv._[0] === 'cat') {
  
  (function(){
    var ctnrId = argv._[1];
    if(!ctnrId) _fail(new Error('invalid usage'));
    ldc.cat(ctnrId, { expand: argv.expand }, function(err, ctnr){
      if(err) return _fail(err);
      console.log(JSON.stringify(ctnr, null, 2));
    });
  })();

} else if(argv._[0] === 'install'){

  (function(){
    var ctnrIds = argv._.slice(1);
    var ctnr;
    if(!ctnrIds.length || argv.save){ //get deps for a container.jsonld
      try{
        ctnr = JSON.parse(fs.readFileSync(path.join(ldc.root, 'container.jsonld')));
      } catch(e){
        _fail(new Error('could not load '+ path.join(ldc.root, 'container.jsonld')));
      }
    }

    if(!ctnrIds.length){
      ctnrIds = ctnr.isBasedOnUrl || [];
      delete argv.top;
    }

    ldc.install(ctnrIds, { top: argv.top, env: argv.env, cache: argv.cache, force: argv.force }, function(err, ctnrs){
      if(err) _fail(err);

      if(argv.save){
        ctnr.isBasedOnUrl = uniq( ctnrs.map(function(x){return x['@id'];}).concat(ctnr.isBasedOnUrl || []) );
        fs.writeFileSync(path.join(ldc.root, 'container.jsonld'), JSON.stringify(ctnr, null, 2));
      }

      //print tree
      var names = ctnrs.map(function(x){return x.name;});
      var paths = readdirpSync(ldc.root)
        .filter(function(p){
          return names.indexOf(p.split(path.sep)[(argv.top) ? 0: 1]) !== -1;
        })
        .map(function(p){return '.' + path.sep + p;});
      
      if(paths.length){
        console.log(tree(paths));
      }

    });    

  })();

} else if (argv._[0] === 'publish') {
  if(!fs.existsSync(path.resolve(ldc.root, 'container.jsonld'))){
    _fail(new Error('no container.jsonld file in '+ ldc.root));
  };

  ldc.publish(function(err, id){
    if(err) return _fail(err);
    console.log('+ ' + id);
  });

} else if (argv._[0] === 'unpublish') {

  (function(){
    var ctnrId = argv._[1];
    if(!ctnrId) _fail(new Error('invalid usage'));
    ldc.unpublish(ctnrId, _fail);
  })();
  
} else if (argv._[0] === 'adduser') {

  (function(){

    function readStuff(stuff, cb){
      var options = {prompt: stuff + ': '};
      var vname;
      if(stuff === 'password'){
        vname = 'pw';
        options.silent = true;
        options.replace = '*';
      } else {
        vname = stuff;
      }
      read(options, function(err, result){
        if(err || !result) {
          console.error((err && err.message) || (prompt + ' cannot be empty'));
          return readStuff(stuff, cb);
        }
        err = validateUser[vname](result);
        if(err) {
          console.error(err.message);
          return readStuff(stuff, cb);
        }
        return cb(null, result);
      });
    };

    async.series({
      name: function(cb){
        readStuff('username', cb);
      },
      email: function(cb){
        readStuff('email', cb);
      },
      password: function(cb){
        readStuff('password', cb);
      }
    }, function (err, prompted){
      if(err) _fail(err);

      for(var key in prompted){
        ldc.rc[key] = prompted[key];
      }

      var $HOME = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;
      try {
        fs.writeFileSync(path.resolve($HOME, '.ldcrc'), JSON.stringify(ldc.rc, function(key, value){
          if(key.charAt(0) === '_' || key.charAt(0) === '$' || key === 'config'){
            return undefined;
          }
          return value;
        }, 2));
      } catch (e){
        _fail(e);
      }
      ldc.adduser(_fail);
    });
    
  })();

} else if (argv._[0] === 'owner'){

  (function(){
    var action = argv._[1];
    if(!action) _fail(new Error('invalid usage'));
    var ctnrname;

    if(action === 'add'){
      var granted = argv._[2];
      if(!granted) _fail(new Error('invalid usage'));

      ctnrName = argv._[3];
      if(!ctnrName) _fail(new Error('invalid usage'));

      ldc.addOwner({username: granted, ctnrName: ctnrName}, _fail);

    } else if (action === 'ls'){

      ctnrName = argv._[2];
      if(!ctnrName) _fail(new Error('invalid usage'));
      
      ldc.lsOwner(ctnrName, function(err, maintainers){
        if(err) _fail(err);
        if(!Array.isArray(maintainers)) _fail(new Error('no maintainers'));
        maintainers.forEach(function(m){
          console.log(m.name, m.email);
        });
      });

    } else if (action === 'rm') {

      var banned = argv._[2];
      if(!banned) _fail(new Error('invalid usage'));

      ctnrName = argv._[3];
      if(!ctnrName) _fail(new Error('invalid usage'));

      ldc.rmOwner({username: banned, ctnrName: ctnrName}, _fail);

    } else {
      _fail(new Error('invalid usage'));
    }
  })();


} else if (argv._[0] === 'search'){

  (function(){
    var keys = argv._.slice(1);
    var qs = (keys.length) ?  '?keys=' + JSON.stringify(flatten(keys.map(function(x){return x.split('-');}))): '';

    var $HOME = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;

    var rpath = '/search' + qs
    var rurl = ldc.url(rpath);
    ldc.logHttp('GET', rurl);
    request(ldc.rOpts(rurl)).on('response', function(res){
      ldc.logHttp(res.statusCode, rurl);
      if(res.statusCode === 404){
        res.setEncoding('utf8');
        var data = '';
        res.on('data', function(chunk){data += chunk});
        res.on('end', function(){
          _fail(new Error(JSON.parse(data).error));
        });
      } else {
        res
          .pipe(split(function(row){
            if(row) {
              row = JSON.parse(row);
              if('error' in row) return row.error + os.EOL; //no results;
              return row.value._id.underline + ' [' + row.key.cyan + ']: ' + row.value.description + os.EOL;
            }
          }))
          .pipe(process.stdout);    
      }})
      .on('error', _fail)
      .end();
  })();
  
} else if (argv._[0] === 'help'){
  
  console.log(optimist.help());
  
} else {

  _fail(new Error('invalid command'));

};

function _fail(err){
  if(err){
    console.error('ldc'.grey +  ' ERR! '.red + err.message + (('code' in err) ? ' (' + err.code + ')': ''));
    process.exit(1);
  }
};
