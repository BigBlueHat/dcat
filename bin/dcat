#!/usr/bin/env node

var path = require('path')
  , util = require('util')
  , isUrl = require('is-url')
  , _ = require('underscore')
  , request = require('request')
  , fs = require('fs')
  , Dcat = require('..')
  , optimist = require('optimist')
  , read = require('read')
  , async = require('async')
  , clone = require('clone')
  , rimraf = require('rimraf')
  , validateUser = require('npm-user-validate')
  , semver = require('semver')
  , querystring = require('querystring')
  , tree = require('../lib/tree')
  , readdirpSync = require('fs-readdir-recursive')
  , SchemaOrgIo = require('schema-org-io')
  , githubUrlToObject = require('github-url-to-object')
  , bitbucketUrlToObject = require('bitbucket-url-to-object')
  , os = require('os')
  , oboe = require('oboe')
  , colors = require('colors');

var argv = optimist
  .usage(
    [
      'Usage: dcat <command> [options] where command is:',
      '  - init [resource] [-i, --id <namespace>] [-m, --main <resource>[::<type>]] [-p, --part <resource>[::<type>]]',
      '  - show <CURIE> [-e, --expand] [-f, --flatten] [-c, --compact] [-n, --normalize]',
      '  - clone <CURIE>',
      '  - publish',
      '  - unpublish <CURIE>',
      '  - adduser',
      '  - maintainer <subcommand> where subcommand is:',
      '    - ls  <CURIE>',
      '    - add <user> <CURIE>',
      '    - rm  <user> <CURIE>',
      '    - search <keywords>',
      '  - help [command] get help on a comand',
    ].join(os.EOL)
  )
  .boolean(['c','f','e', 'n', 'q', 'v'])
  .describe('force', 'overwrite previous if exists')
  .alias('m', 'main').describe('m', 'import the resource as the core of the document')
  .alias('p', 'part').describe('p', 'import the resource as a part of the document')
  .alias('i', 'id').describe('i', 'specify a namespace (@id) and bypass the promzard prompt')
  .alias('c', 'compact').describe('c', 'compact the JSON-LD document')
  .alias('f', 'flatten').describe('f', 'flatten the JSON-LD document')
  .alias('e', 'expand').describe('e', 'expand the JSON-LD document')
  .alias('n', 'normalize').describe('n', 'normalize the JSON-LD document')
  .alias('q', 'quiet').describe('q', 'no verbose')
  .alias('h', 'help').describe('h', 'print usage')
  .alias('v', 'version').describe('v', 'print version number')
  .argv;

if (argv.h) {
  console.log(optimist.help());
  process.exit(0);
}

if (argv.v) {
  console.log(require('../package.json').version);
  process.exit(0);
}

var dcat = new Dcat(null, process.cwd());

if (!argv.q && (argv._[0] !== 'cat')) {
  dcat.on('log', console.log);
}

if (argv._[0] === 'init') {

  (function(){

    //validate argv:
    if (argv.m && ((typeof argv.m === 'boolean') || Array.isArray(argv.m))) {
      return _fail(new Error('invalid usage: -m, --main must be invoked only one and be followed by a single resource'));
    }
    if (argv.p && typeof argv.p === 'boolean') {
      return _fail(new Error('invalid usage: -p, --part must be followed by a resource'));
    }
    if (typeof argv.id === 'boolean') {
      return _fail(new Error('invalid usage, -i, --id must be followed by a namespace value'));
    }

    //inspired from https://github.com/maxogden/datapackage-json/blob/master/prompt.js
    var description;
    var readme = ['README.md', 'README', 'README.markdown'].filter(fs.existsSync)[0];
    if (readme) {
      try {
        var src = fs.readFileSync('README.md', 'utf8');
        description = src.split('\n').filter(function (line) {
          return /\s+/.test(line) && !line.trim().match(/^#/);
        })[0]
          .trim()
          .replace(/^./, function (c) { return c.toLowerCase() })
          .replace(/\.$/, '');
      } catch (e) { }
    }

    var codeRepository, isBasedOnUrl;
    try { var gconf = fs.readFileSync('.git/config').toString() }
    catch (e) { gconf = null }
    if (gconf) {
      gconf = gconf.split(/\r?\n/)
      var i = gconf.indexOf('[remote "origin"]')
      if (i !== -1) {
        codeRepository = gconf[i + 1]
        if (!codeRepository.match(/^\s*url =/)) codeRepository = gconf[i + 2];
        if (!codeRepository.match(/^\s*url =/)) codeRepository = null;
        else codeRepository = codeRepository.replace(/^\s*url = /, '');
      }
    }
    codeRepository = githubUrlToObject(codeRepository) || bitbucketUrlToObject(codeRepository);
    if (codeRepository) {
      isBasedOnUrl = codeRepository.https_url;
    }

    var prompt;
    var defaults = {
      license: 'http://creativecommons.org/publicdomain/zero/1.0/',
      version: '0.0.0',
      namespace: path.basename(dcat.root),
      description: description,
      isBasedOnUrl: isBasedOnUrl
    };
    if(argv.id){
      defaults.namespace = argv.id;
      prompt = [
        function(cb){
          cb(null, defaults);
        }
      ];
    } else {
      prompt = {
        namespace: function(cb){
          read({prompt: 'namespace (document unique identifier): ', default: defaults.namespace}, function(err, prompted, _){cb(err, prompted);});
        },
        version: function(cb){
          read({prompt: 'version: ', default: defaults.version}, function(err, prompted, _){cb(err, prompted);});
        },
        keywords: function(cb){
          read({prompt: 'keywords: '}, function(err, prompted, _){cb(err, prompted.split(/[\s,]+/));});
        },
        description: function(cb){
          read({ prompt: 'description: ', default: defaults.description }, function(err, prompted, _){cb(err, prompted);});
        },
        isBasedOnUrl: function(cb){
          read({ prompt: 'URL of a resource that was used in the creation of this resource: ', default: defaults.isBasedOnUrl }, function(err, prompted, _){cb(err, prompted);});
        },
        license: function(cb){
          read({ prompt: 'license: ', default: 'http://creativecommons.org/publicdomain/zero/1.0/' }, function(err, prompted, _){cb(err, prompted);});
        }
      };
    }

    async.series(prompt, function (err, prompted){
      if (err) _fail(err);
      prompted = Array.isArray(prompted) ? prompted[0] : prompted;

      function _untype(x) {
        var splt = x.split('::');
        var obj = {id: splt[0]};
        if (splt[1]) {
          obj.type = splt[1];
        }
        return obj;
      }

      var main = argv.m && _untype(argv.m) || [];
      var parts = (argv.p || []);
      parts = (Array.isArray(parts) ? parts : [parts]).map(_untype);
      parts = parts.concat(argv._.slice(1).map(_untype));

      var opts = {namespace: prompted.namespace};

      dcat.wrap(main, opts, function(err, rmain, reservedIds){
        if (err) _fail(err);
        opts.reservedIds = reservedIds;
        dcat.wrap(parts, opts, function(err, rparts, reservedIds){
          if (err) _fail(err);

          var doc = { '@context': SchemaOrgIo.contextUrl, '@id': prompted.namespace };

          //keep a nice order
          if (argv.m) {
            if (rmain.length !== 1) {
              return _fail(new Error('only 1 resource can be specified as main'));
            }

            if (rmain[0]['@type']) {
              doc['@type'] = rmain[0]['@type'];
              delete rmain[0]['@id'];
              delete rmain[0]['@type'];
            }
          }

          if (!doc['@type']) {
            doc['@type'] = 'CreativeWork';
          }

          if (prompted.version) {
            doc.version = prompted.version;
          }

          if (prompted.description) {
            doc.description = prompted.description;
          }

          if (prompted.license) {
            doc.license = isUrl(prompted.license) ? prompted.license : { name: prompted.license };
          }

          if (prompted.keywords && (prompted.keywords.filter(function(x){return x;})).length) {
            doc.keywords = prompted.keywords;
          }

          if (dcat.rc.name || dcat.rc.email) {
            doc.accountablePerson = {'@type': 'Person'}; //TODO @id with user profile
            if (dcat.rc.name) doc.accountablePerson.name = dcat.rc.name;
            if (dcat.rc.email) doc.accountablePerson.email = 'mailto:' + dcat.rc.email;
          }

          if (prompted.isBasedOnUrl) {
            if ((doc['@type'] === 'Code') && !doc.codeRepository) {
              doc.codeRepository = prompted.isBasedOnUrl;
            } else {
              doc.isBasedOnUrl = prompted.isBasedOnUrl;
            }
          }

          if (argv.m) {
            for (var key in rmain[0]) {
              doc[key] = rmain[0][key];
            }
          }

          if (rparts.length) {
            doc.hasPart = rparts;
          }

          dcat.emit('log', '+'.green + ' JSONLD');
          fs.writeFileSync(path.resolve(dcat.root, 'JSONLD'), JSON.stringify(doc, null, 2));

        });
      });
    });

  })();

} else if (argv._[0] === 'show') {

  (function(){
    var curie = argv._[1];
    if (!curie) _fail(new Error('invalid usage: missing CURIE'));
    var opts = { normalize: argv.n };
    if ((argv.e + argv.c + argv.f) > 1) {
      _fail(new Error('invalid usage: select either -e --expand, -c --compact or -f --flatten'));
    } else if (argv.e) {
      opts.profile = 'expanded';
    } else if (argv.f) {
      opts.profile = 'flattened';
    } else if (argv.c) {
      opts.profile = 'compacted';
    }

    dcat.show(curie, opts, function(err, doc){
      if (err) return _fail(err);
      console.log((opts.normalize)? doc : JSON.stringify(doc, null, 2));
    });
  })();

} else if(argv._[0] === 'clone'){

  (function(){
    var curie = argv._[1];
    if (!curie) _fail(new Error('invalid usage: missing CURIE'));

    dcat.clone(curie, {force: argv.force}, function(err, doc){
      if (err) _fail(err);
      if (doc['@id']) {
        var root = dcat.docRoot(doc['@id']);
        var paths = readdirpSync(root).map(function(p){
          return path.relative(dcat.root, path.join(root, p)).replace(/\\/g, '/'); //on windows path.sep is "\\"
        });
        if (paths.length) {
          console.log(tree(paths));
        }
      }
    });
  })();

} else if (argv._[0] === 'publish') {

  if (!fs.existsSync(path.resolve(dcat.root, 'JSONLD'))){
    _fail(new Error('no JSONLD file in '+ dcat.root));
  };

  dcat.publish(function(err, doc){
    if (err) return _fail(err);
    console.log('+ '.green + doc['@id']);
  });

} else if (argv._[0] === 'unpublish') {

  (function(){

    var curie = argv._[1];
    if (!curie) _fail(new Error('invalid usage: missing CURIE'));
    dcat.unpublish(curie, function(err, body){
      if (err) _fail(err);
      console.log('- '.red + curie);
    });

  })();

} else if (argv._[0] === 'adduser') {

  (function(){

    function readInput(input, cb){
      var options = {prompt: input + ': '};
      var vname;
      if (input === 'password'){
        vname = 'pw';
        options.silent = true;
        options.replace = '*';
      } else {
        vname = input;
      }
      read(options, function(err, result){
        if (err || !result) {
          console.error((err && err.message) || (prompt + ' cannot be empty'));
          return readInput(input, cb);
        }
        err = validateUser[vname](result);
        if (err) {
          console.error(err.message);
          return readInput(input, cb);
        }
        return cb(null, result);
      });
    };

    async.series({
      name: function(cb){ readInput('username', cb); },
      email: function(cb){ readInput('email', cb); },
      password: function(cb){ readInput('password', cb); }
    }, function (err, prompted){
      if (err) _fail(err);

      for (var key in prompted) {
        dcat.rc[key] = prompted[key];
      }

      var $HOME = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;
      try {
        fs.writeFileSync(path.resolve($HOME, '.dcatrc'), JSON.stringify(dcat.rc, function(key, value){
          if (key.charAt(0) === '_' || key.charAt(0) === '$' || key === 'config') {
            return undefined;
          }
          return value;
        }, 2));
      } catch (e) {
        _fail(e);
      }
      dcat.addUser(function(err, body){
        if (err) return _fail(err);
        console.log('+'.green, body.agent || body['@id']);
      });
    });

  })();

} else if (argv._[0] === 'maintainer'){

  (function(){
    var action = argv._[1];
    if(!action) _fail(new Error('invalid usage'));

    var username, namespace;
    if(action === 'add' || action === 'rm'){
      var msg = 'invalid usage: dcat maintainer ' + action + ' <username> <CURIE>'

      var username = argv._[2];
      if(!username) _fail(new Error(msg));

      namespace = argv._[3];
      if(!namespace) _fail(new Error(msg));

      dcat[action + 'Maintainer']({username: username, namespace: namespace}, function(err){
        if (err) return _fail(err);
        console.log(((action === 'add') ? '+ '.green : '- '.red) + 'ldr:user/' + username);
      });

    } else if (action === 'ls'){

      namespace = argv._[2];
      if(!namespace) _fail(new Error('invalid usage: dcat maintainer ls <CURIE>'));

      dcat.lsMaintainer(namespace, function(err, body){
        if(err) _fail(err);
        if(!body.accountablePerson) _fail(new Error('no maintainers'));
        body.accountablePerson.forEach(function(m){
          console.log('-', m['@id'], m.email);
        });
      });

    } else {
      _fail(new Error('invalid usage'));
    }
  })();

} else if (argv._[0] === 'search') {

  (function(){
    var keywords = argv._.slice(1)
      .map(function(x){return x.trim().toLowerCase()})
      .map(function(x){return x;});

    if (!keywords.length) {
      return _fail(new Error('invalid usage: search must be followed by one or several keywords'));
    }

    var rurl = dcat.url('search?' + querystring.stringify({keywords: keywords}));
    dcat.log('GET', rurl);
    var cnt = 0;
    oboe(rurl)
      .start(function(statusCode, headers){
        dcat.log(statusCode, rurl);
      })
      .node('itemListElement.*', function(node){
        cnt++;
        var s = '- ' + '@id '.magenta  + node['@id'];
        ['@type', 'name', 'version', 'description'].forEach(function(x){
          if (x in node) {
            s += ' ' + x.grey + ' ' + node[x];
          }
        });
        console.log(s);
      })
      .done(function(){
        console.log(cnt.toString().green + ' results');
      })
      .fail(function(errorReport) {
        if (errorReport.thrown) {
          _fail(errorReport.thrown);
        } else if (errorReport.statusCode === 404) {
          console.log(errorReport.jsonBody.error);
        } else {
          _fail(dcat._error(errorReport.jsonBody, errorReport.statusCode));
        }
      });

  })();

} else if (argv._[0] === 'help') {

  console.log(optimist.help());

} else {

  _fail(new Error('invalid command'));

};

function _fail(err){
  if (err) {
    console.error('dcat'.grey +  ' ERR! '.red + err.message + (('code' in err) ? ' (' + err.code + ')': ''));
    process.exit(1);
  }
};
