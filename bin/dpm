#!/usr/bin/env node

var path = require('path')
  , fs = require('fs')
  , Dpm = require('..')
  , optimist = require('optimist')
  , read = require('read')
  , async = require('async')
  , validate = require('npm-user-validate')
  , semver = require('semver');

var argv = optimist
  .usage(
    [
      'Usage: dpm <command> [options] where command is:',
      '  - install   <name>[@<version>] [options]',
      '  - publish',
      '  - unpublish <name>[@<version>] [options]',
      '  - adduser',
      '  - owner',
      '  - search',
    ].join('\n')
  )
  .alias('f', 'force').describe('f', 'just do it')
  .alias('h', 'help').describe('h', 'print usage')
  .alias('v', 'version').describe('v', 'print version number')
  .argv;

if(argv.h){
  console.log(optimist.help());
  process.exit(0);
}

if(argv.v){
  console.log(require('../package.json').version);
  process.exit(0);
}

var dpm = new Dpm(require('rc')('dpm', {port: 5984, hostname: '127.0.0.1'}), process.cwd());

if(argv._[0] === 'install'){

  (function(){
    var what = _what(argv);
    var dest = path.resolve(dpm.root, 'package.json');
    if(fs.existsSync(dest) && !argv.force){
      _fail(new Error('package.json already exists'));
    }

    dpm.install(what, function(err, dpkg){
      if(err) _fail(err);
      fs.writeFileSync(dest, JSON.stringify(dpkg, null, 2));
    });
  })();

} else if (argv._[0] === 'publish') {

  dpm.auth(function(err, token){
    if(err) _fail(err);
    dpm.publish(token, function(err, body){
      if(err) _fail(err);
    });
  });

} else if (argv._[0] === 'unpublish') {


} else if (argv._[0] === 'adduser') {

  (function(){

    function readStuff(stuff, cb){
      var options = {prompt: stuff + ': '};
      var vname;
      if(stuff === 'password'){
        vname = 'pw';
        options.silent = true;
        options.replace = '*';
      } else {
        vname = stuff;
      }
      read(options, function(err, result){
        if(err || !result) {
          console.error((err && err.message) || (prompt + ' cannot be empty'));
          return readStuff(stuff, cb);
        }
        err = validate[vname](result);
        if(err) {
          console.error(err.message);
          return readStuff(stuff, cb);
        }
        return cb(null, result);
      });
    };

    async.series({
      name: function(cb){
        readStuff('username', cb);
      },
      email: function(cb){
        readStuff('email', cb);
      },
      password: function(cb){
        readStuff('password', cb);
      }
    }, function (err, prompted){
      if(err) _fail(err);

      for(var key in prompted){
        dpm.rc[key] = prompted[key];
      }

      var $HOME = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;
      try {
        fs.writeFileSync(path.resolve($HOME, '.dpmrc'), JSON.stringify(dpm.rc, function(key, value){
          if(key.charAt(0) === '_' || key.charAt(0) === '$' || key === 'config'){
            return undefined;
          }
          return value;
        }, 2));
      } catch (e){
        _fail(e);
      }
      dpm.adduser(_fail);
    });

  })();

} else if (argv._[0] === 'owner'){


} else if (argv._[0] === 'search'){


} else {
  _fail(new Error('invalid command'));
};



function _what(argv){
  var name = argv._[1];
  if(!name) _fail(new Error('invalid usage'));

  name = name.split('@');
  var what = {datapackage: name[0]};
  if(name.length === 2){
    var version = semver.valid(name[1]);
    if(!version){
      _fail(new Error('invalid version see http://semver.org/'));
    }
    what.version = version;
  }

  return what;
}

function _fail(err){
  if(err){
    console.error(err.message + (('code' in err) ? ' (' + err.code + ')': ''));
    process.exit(1);
  }
}
