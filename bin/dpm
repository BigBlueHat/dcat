#!/usr/bin/env node

var path = require('path')
  , http = require('http')
  , fs = require('fs')
  , Dpm = require('..')
  , optimist = require('optimist')
  , read = require('read')
  , async = require('async')
  , rimraf = require('rimraf')
  , validate = require('npm-user-validate')
  , semver = require('semver')
  , split = require('split')
  , querystring = require('querystring')
  , colors = require('colors');

var argv = optimist
  .usage(
    [
      'Usage: dpm <command> [options] where command is:',
      '  - install   <datapackage name>[@<version>] [-f, --force] [-c, --cache]',
      '  - publish',
      '  - unpublish <datapackage name>[@<version>]',
      '  - adduser',
      '  - owner <subcommand> where subcommand is:',
      '    - ls  <datapackage name>',
      '    - add <user> <datapackage name>',
      '    - rm  <user> <datapackage name>[@<version>]',
      '  - search [search terms]',
    ].join('\n')
  )
  .alias('f', 'force').describe('f', 'just do it')
  .alias('c', 'cache').describe('c', 'store the resources content on the disk in a data/ directory')
  .alias('h', 'help').describe('h', 'print usage')
  .alias('v', 'version').describe('v', 'print version number')
  .argv;

if(argv.h){
  console.log(optimist.help());
  process.exit(0);
}

if(argv.v){
  console.log(require('../package.json').version);
  process.exit(0);
}

//if cloudant: use sha:true
var dpm = new Dpm(require('rc')('dpm', {port: 80, hostname: 'registry.standardanalytics.io', sha:true}), process.cwd());

dpm.on('log', console.log);

if(argv._[0] === 'install'){

  (function(){
    var what = _what(argv);
    var dest = path.resolve(dpm.root, 'package.json');
    if(fs.existsSync(dest) && !argv.force){
      _fail(new Error('package.json already exists'));
    }

    if(argv.cache && fs.existsSync(path.join(dpm.root, 'data'))){
      if(argv.force){
        rimraf.sync(path.join(dpm.root, 'data'));
      } else {
        _fail(new Error('data/ already exists'));
      }
    }

    dpm.install(what, {cache: argv.cache}, function(err, dpkg){
      if(err) _fail(err);
      fs.writeFileSync(dest, JSON.stringify(dpkg, null, 2));
      console.log(dest);
    });
  })();

} else if (argv._[0] === 'publish') {
  if(!fs.existsSync(path.resolve(dpm.root, 'package.json'))){
    _fail(new Error('no package.json file in '+ dpm.root));
  };

  dpm.publish(function(err, id){
    if(err) return _fail(err);
    console.log('+ ' + id);
  });

} else if (argv._[0] === 'unpublish') {

  (function(){
    var dpkgId = argv._[1];
    if(!dpkgId) _fail(new Error('invalid usage'));
    dpm.unpublish(dpkgId, _fail);
  })();
  
} else if (argv._[0] === 'adduser') {

  (function(){

    function readStuff(stuff, cb){
      var options = {prompt: stuff + ': '};
      var vname;
      if(stuff === 'password'){
        vname = 'pw';
        options.silent = true;
        options.replace = '*';
      } else {
        vname = stuff;
      }
      read(options, function(err, result){
        if(err || !result) {
          console.error((err && err.message) || (prompt + ' cannot be empty'));
          return readStuff(stuff, cb);
        }
        err = validate[vname](result);
        if(err) {
          console.error(err.message);
          return readStuff(stuff, cb);
        }
        return cb(null, result);
      });
    };

    async.series({
      name: function(cb){
        readStuff('username', cb);
      },
      email: function(cb){
        readStuff('email', cb);
      },
      password: function(cb){
        readStuff('password', cb);
      }
    }, function (err, prompted){
      if(err) _fail(err);

      for(var key in prompted){
        dpm.rc[key] = prompted[key];
      }

      var $HOME = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;
      try {
        fs.writeFileSync(path.resolve($HOME, '.dpmrc'), JSON.stringify(dpm.rc, function(key, value){
          if(key.charAt(0) === '_' || key.charAt(0) === '$' || key === 'config'){
            return undefined;
          }
          return value;
        }, 2));
      } catch (e){
        _fail(e);
      }
      dpm.adduser(_fail);
    });

  })();

} else if (argv._[0] === 'owner'){

  (function(){
    var action = argv._[1];
    if(!action) _fail(new Error('invalid usage'));
    var dpkgname;

    if(action === 'add'){
      var granted = argv._[2];
      if(!granted) _fail(new Error('invalid usage'));

      dpkgName = argv._[3];
      if(!dpkgName) _fail(new Error('invalid usage'));

      dpm.addOwner({username: granted, dpkgName: dpkgName}, _fail);

    } else if (action === 'ls'){

      dpkgName = argv._[2];
      if(!dpkgName) _fail(new Error('invalid usage'));
      
      dpm.lsOwner(dpkgName, function(err, maintainers){
        if(err) _fail(err);
        maintainers.forEach(function(m){
          console.log(m.name, m.email);
        });
      });

    } else if (action === 'rm') {

      var banned = argv._[2];
      if(!banned) _fail(new Error('invalid usage'));

      dpkgName = argv._[3];
      if(!dpkgName) _fail(new Error('invalid usage'));

      dpm.rmOwner({username: banned, dpkgName: dpkgName}, _fail);

    } else {
      _fail(new Error('invalid usage'));
    }
  })();


} else if (argv._[0] === 'search'){

  (function(){
    var keys = argv._.slice(1);
    var qs = (keys.length) ?  '?keys=' + JSON.stringify(keys): '';

    var rpath = '/search' + qs
    var rurl = dpm.url(rpath);
    dpm.log('GET', rurl);
    http.request({port: dpm.rc.port, hostname: dpm.rc.hostname, method: 'GET', path: rpath}, function(res){
      dpm.log(res.statusCode, rurl);
      if(res.statusCode === 404){
        res.setEncoding('utf8');
        var data = '';
        res.on('data', function(chunk){data += chunk});
        res.on('end', function(){
          _fail(new Error(JSON.parse(data).error));
        });
      } else {
        res
          .pipe(split(function(row){
            if(row) {
              row = JSON.parse(row);
              return row.value._id.underline + ' [' + row.key.cyan + ']: ' + row.value.description + '\n';
            }
          }))
          .pipe(process.stdout);    
      }})
      .on('error', _fail)
      .end();
  })();
  
} else if (argv._[0] === 'help'){

  console.log(optimist.help());

} else {

  _fail(new Error('invalid command'));

};

function _what(argv){
  var name = argv._[1];
  if(!name) _fail(new Error('invalid usage'));

  name = name.split('@');
  var what = {datapackage: name[0]};
  if(name.length === 2){
    var version = semver.valid(name[1]);
    if(!version){
      _fail(new Error('invalid version see http://semver.org/'));
    }
    what.version = version;
  }

  return what;
};

function _fail(err){
  if(err){
    console.error('dpm'.grey +  ' ERR! '.red + err.message + (('code' in err) ? ' (' + err.code + ')': ''));
    process.exit(1);
  }
};
